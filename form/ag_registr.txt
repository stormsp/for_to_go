; ГРС Красноусольск

#include "eval.lib\front.evl"
#include "eval.lib\valTrack.evl"

;ba+0 - запрос снизу
;ba+1 - ответ сверху
;ba+2 - результат. 0- запрет, 1 - ожидание ответа, 2 - разрешение
;id   - для слежения

func dopusk(ba,id)

  if ne(dout[ba],dout[id]) 
    if eq(dout[ba],1) ;запрос снизу
      dout[ba+2]=1 ;сигнал о запросе наверх
    endif
    if eq(dout[ba],2) ;завершено снизу
      dout[ba+2]=0 ;
    endif
  endif

  if eq(dout[ba],1) & eq(dout[ba+1],1);разрешение получено
    dout[ba+0]=0 ;сброс
    dout[ba+1]=0 ;сброс
    dout[ba+2]=2 ;разрешен
  endif

  if eq(dout[ba+1],2);получен запрет
    dout[ba+0]=0 ;сброс
    dout[ba+1]=0 ;сброс
    dout[ba+2]=0 ;запрет
  endif
endfunc

;таймер возвращает время активной comm в секундах
; id - aout для работы
; comm - команда управления 1-считать, иначе сброс
func timer(id,comm)
  if eq(comm,1)
    if eq(aout[id],0)
      aout[id]=time()
    endif
    return(time()-aout[id])
  endif

  aout[id]=0
  return(0)
endfunc


; функция для фиксирования факта появления сигнала
; если cond=1 , то бит установится иначе без изменений

func setbitif(cond, dword, bitnum)
  if cond
    return setbits(dword,1,bitnum,1)
  endif
  return dword
endfunc


; ------ функция слежения за алгоритмами
func testTrack(reason, error, status, t1, id1, id2)
    if front(reason,id2)
      dout[id1+2]= 1 ;выполняется
    endif

    if eq(dout[id1+2],1);выполняется
      aout[id1+0]= t1
      aout[id1+1]=time()-t1

      if eq(status,0) ;выполнялось
        dout[id1+2]=2+error
      endif
    endif
    return(0)
endfunc  


func word2outs(w, id)
  dout[id+0]=bit(w,0)
  dout[id+1]=bit(w,1)
  dout[id+2]=bit(w,2)
  dout[id+3]=bit(w,3)
  dout[id+4]=bit(w,4)
  dout[id+5]=bit(w,5)
  dout[id+6]=bit(w,6)
  dout[id+7]=bit(w,7)
  dout[id+8]=bit(w,8)
  dout[id+9]=bit(w,9)
  dout[id+10]=bit(w,10)
  dout[id+11]=bit(w,11)
  dout[id+12]=bit(w,12)
  dout[id+13]=bit(w,13)
  dout[id+14]=bit(w,14)
  dout[id+15]=bit(w,15)
endfunc


;-----------------------------------
func oninit(t)

  codps=0
  codz=0

  dout[3]=0
  dout[6]=0
  dout[9]=0
  dout[12]=0
  dout[15]=0

 aout[70]=0
 dout[90]=0
 dout[91]=0
 dout[92]=0
 dout[95]=0
 dout[96]=0
 dout[97]=0
 dout[98]=0

  sleep(18*4)


 aout[21]=true({НАЧ ОПР1 КРАС})
 aout[22]=true({ВР ОПР1 КРАС}/10)
 dout[23]=true({РЕЗ ОПР1 КРАС})
 aout[24]=true({НАЧ ОПР2 КРАС})
 aout[25]=true({ВР ОПР2 КРАС}/10)
 dout[26]=true({РЕЗ ОПР2 КРАС})
 aout[27]=true({НАЧ ОПР3 КРАС})
 aout[28]=true({ВР ОПР3 КРАС}/10)
 dout[29]=true({РЕЗ ОПР3 КРАС})
 aout[30]=true({НАЧ ОПР4 КРАС})
 aout[31]=true({ВР ОПР4 КРАС}/10)
 dout[32]=true({РЕЗ ОПР4 КРАС})
 aout[33]=true({НАЧ ОПР5 КРАС})
 aout[34]=true({ВР ОПР5 КРАС}/10)
 dout[35]=true({РЕЗ ОПР5 КРАС})
 aout[36]=true({НАЧ ОПР6 КРАС})
 aout[37]=true({ВР ОПР6 КРАС}/10)
 dout[38]=true({РЕЗ ОПР6 КРАС})
 aout[39]=true({НАЧ ОПР7 КРАС})
 aout[40]=true({ВР ОПР7 КРАС}/10)
 dout[41]=true({РЕЗ ОПР7 КРАС})
 aout[42]=true({НАЧ ОПР8 КРАС})
 aout[43]=true({ВР ОПР8 КРАС}/10)
 dout[44]=true({РЕЗ ОПР8 КРАС})
 aout[45]=true({НАЧ ОПР9 КРАС})
 aout[46]=true({ВР ОПР9 КРАС}/10)
 dout[47]=true({РЕЗ ОПР9 КРАС})
 aout[48]=true({НАЧ ОПР10 КРАС})
 aout[49]=true({ВР ОПР10 КРАС}/10)
 dout[50]=true({РЕЗ ОПР10 КРАС})
 aout[51]=true({НАЧ ОПР11 КРАС})
 aout[52]=true({ВР ОПР11 КРАС}/10)
 dout[53]=true({РЕЗ ОПР11 КРАС})
 aout[54]=true({НАЧ ОПР12 КРАС})
 aout[55]=true({ВР ОПР12 КРАС}/10)
 dout[56]=true({РЕЗ ОПР12 КРАС})
 aout[57]=true({НАЧ ОПР13 КРАС})
 aout[58]=true({ВР ОПР13 КРАС}/10)
 dout[59]=true({РЕЗ ОПР13 КРАС})
 aout[60]=true({НАЧ ОПР14 КРАС})
 aout[61]=true({ВР ОПР14 КРАС}/10)
 dout[62]=true({РЕЗ ОПР14 КРАС})


endfunc


x = dopusk( 1,111)
x = dopusk( 4,112)
x = dopusk( 7,113)
x = dopusk(10,114)
x = dopusk(13,115)
x = dopusk(16,116)


; слежение за кранами 16 бит(с запасом)
  w=aout[70]
  w=setbits(w,1,0,valTrack(ne({ОК УРЛ КРАС},0),30,100)) ;проблемы с охр краном
  w=setbits(w,1,1,valTrack(ne({КРБП УРЛ КРАС},0),15,101)) ;проблемы с БП краном
  w=setbits(w,1,2,valTrack(ne({КРВХ УРЛ КРАС},0),15,102)) ;проблемы с вх краном
  w=setbits(w,1,3,valTrack(ne({КРВЫХ УРЛ КРАС},0),15,103)) ;проблемы с вых краном
  w=setbits(w,1,4,valTrack(ne({КРЕД1 УРЛ КРАС},0),15,104)) ;проблемы с лред краном
  w=setbits(w,1,5,valTrack(ne({КРЕД2 УРЛ КРАС},0),15,105)) ;проблемы с лред краном
  w=setbits(w,1,6,valTrack(ne({КСВН УРЛ КРАС},0),15,106)) ;проблемы с свечн краном (при опробовании это м.б. норма)
  w=setbits(w,1,7,valTrack(ne({КСВВ УРЛ КРАС},0),15,107)) ;проблемы с свечн краном (при опробовании это м.б. норма)
  w=setbits(w,1,8,valTrack(ne({ПГБП УРЛ КРАС},0),15,108)) ;проблемы с байп ПГ
  w=setbits(w,1,9,valTrack(ne({ПГВХ УРЛ КРАС},0),15,109)) ;проблемы с вх ПГ
  w=setbits(w,1,10,valTrack(ne({ПГВЫХ УРЛ КРАС},0),15,110)) ;проблемы с вых ПГ
  aout[70]=w
  x=word2outs(w,71)

; ------- для байпаса -------------

 ;давление в норме 5%
pNorm=gt({РВЫХ123 КРАС},0.95*{РВЫХ ЗАД КРАС})
pNorm=pNorm & lt({РВЫХ123 КРАС},1.05*{РВЫХ ЗАД КРАС})
dout[91]=!pNorm

 ; время работы на контуре ЭР-04(КРБП)
x = ne({КРАН БАЙП КРАС},2) & {РЕЖ РЕГ04 КРАС} ; контур ЭР-04 (Шибель) в работе
aout[88]=timer(126,x)
if ne(aout[88],0)
  dout[92]=lt(aout[88],60*5) ;время на бп меньше 
endif


 ; время работы на контуре САУ
x = ne({КРАН БАЙП КРАС},2) & {РЕЖ РСАУ КРАС} ; контур САУ в работе
aout[89]=timer(127,x)


; ---------------------------- проверки байпаса --------------------

if eq({РАЗР1 ДП КРАС},2) ;подтверждено диспетчером

  ; причины безуспешного проведения
  ; - время перестановки кранов велико
  ; - погрешность регулирования давления более 5% 
  ; - время работы на байпасе недостаточно
  dout[90]=ne({КОД ОШ БП КРАС},0) ; здесь пока только краны
  error=dout[90]|dout[91]|dout[92]

  x=testTrack(eq({ПРИЧ БП КРАС},1),error,{ХОД БАЙП КРАС},{ДАТА БП КРАС},21,117); по низкому
  x=testTrack(eq({ПРИЧ БП КРАС},2),error,{ХОД БАЙП КРАС},{ДАТА БП КРАС},24,118); по высокому
  x=testTrack(eq({ПРИЧ БП КРАС},3),error,{ХОД БАЙП КРАС},{ДАТА БП КРАС},27,119); по пожару
  x=testTrack(eq({ПРИЧ БП КРАС},4),error,{ХОД БАЙП КРАС},{ДАТА БП КРАС},30,120); по кнопке

endif

; --------------------- Проверка АО --------------------------------------------

if eq({РАЗР4 ДП КРАС},2) ;подтверждено диспетчером

  ; причины безуспешного проведения
            ; не поданы команды на соответствующие краны  
  aout[99]=setbitif(eq({ОК УРЛ КРАС},2),aout[99],0)
  aout[99]=setbitif(eq({КРВХ УРЛ КРАС},2),aout[99],1)
  aout[99]=setbitif(eq({КРВЫХ УРЛ КРАС},2),aout[99],2)

  if front(ne({РЕЖИМ ГРС КРАС},0),132)
    aout[99]=0
  endif
  

  dout[97]=ne(aout[99],7)
  dout[98]=ne({РЕЖИМ ГРС КРАС},0)   ; режим ГРС -  !0

  error = dout[97]|dout[98]

  x=testTrack(eq({ПРИЧ АО КРАС},2),error,{ХОД АВОСТ КРАС},{ДАТА АО КРАС},36,121); по пожару 
  x=testTrack(eq({ПРИЧ АО КРАС},1),error,{ХОД АВОСТ КРАС},{ДАТА АО КРАС},39,122); по команде

endif

;---------- Проверка пожарной сигнализации ---------------------------


 if front(eq({РАЗР2 ДП КРАС},2),123);подтверждено диспетчером
   codps = 0 ; сбросить код
   aout[42]=time()
   aout[43]=0
   dout[44]=1
 endif

 if eq(dout[44],1) ;выполняется
   codps = setbitif(eq({ЯХПЖ ПЕР КРАС},2),codps,0) ; появился синал пожара блока переключений
   codps = setbitif(eq({ЯХПЖ РЕД КРАС},2),codps,1) ; появился синал пожара блока ред
   codps = setbitif(eq({ЯХПЖ ОПЕР КРАС},2),codps,2) ; появился синал пожара блока опе
   codps = setbitif(eq({ЯХПЖ ИПР КРАС},2),codps,3) ; появился синал пожара ипр

   aout[43]=time()-aout[42]
   
   if eq(codps,15) ; успешно
     dout[44]=2
   endif

   if gt(time()-aout[42],30*60) ; время вышло 30 мин
     dout[44]=3 ; неудача
   endif
 endif

 aout[95]=codps

;---------- Проверка системы контроля загазованности ---------------------------

 if front(eq({РАЗР3 ДП КРАС},2),124);подтверждено диспетчером
   codz = 0 ; сбросить код
   aout[45]=time()
   aout[46]=0
   dout[47]=1
 endif

 if eq(dout[47],1) ;выполняется
   codz = setbitif({СН-2 ПЕР КРАС},codz,0) ; появился синал пожара блока переключений
   codz = setbitif({СН-2 РЕД КРАС},codz,1) ; появился синал пожара блока ред

   aout[46]=time()-aout[45] ; таймер 

   if eq(codz,3) ; успешно
     dout[47]=2
   endif

   if gt(aout[46],30*60) ; время вышло 30 мин
     dout[47]=3 ; неудача
   endif
 endif

 aout[96]=codz
 

; ------------------- Регламентные работы -----------------------------

func testTrackRR(on, off, id1, id2)
    if front(on,id2)
      dout[id1+2]= 1 ;выполняется
      aout[id1+0]= time()
    endif

    if eq(dout[id1+2],1);выполняется
      aout[id1+1]=time()-aout[id1+0]
      dout[id1+2]=1+off ;выполнено
    endif
    return(0)
endfunc

;----
if eq({РАЗР5 ДП КРАС},2)   ;подтверждено диспетчером
  
  ; -- Ревизия фильтров
  run  =(eq({КР ЛРЕД1 КРАС},2)&lt({DP ФИЛЬТ1 КРАС},0.1))|(eq({КР ЛРЕД2 КРАС},2)&lt({DP ФИЛЬТ2 КРАС},0.1))
  stop = eq({КР ЛРЕД1 КРАС},1)&eq({КР ЛРЕД2 КРАС},1)
  x=testTrackRR(run,stop,51,128);

  ; -- Ревизия ПГ
  run  =eq({КРАН БППГ КРАС},1)&eq({КР ПГВХ КРАС},2)&eq({КР ПГВЫХ КРАС},2)&eq({ПГ РЕЖ КРАС},0)
  stop =eq({КРАН БППГ КРАС},2)&eq({КР ПГВХ КРАС},1)&eq({КР ПГВЫХ КРАС},1)&eq({ПГ РЕЖ КРАС},4)
  x=testTrackRR(run,stop,54,129);

  ; -- Ревизия регуляторов
  run  =(eq({КР ЛРЕД1 КРАС},2)&lt({РРЕГ1 КРАС},0.1))|(eq({КР ЛРЕД2 КРАС},2)&lt({РРЕГ2 КРАС},0.1))
  stop = eq({КР ЛРЕД1 КРАС},1)&eq({КР ЛРЕД2 КРАС},1)
  x=testTrackRR(run,stop,57,130);

  ; -- рез электропитание
  x=testTrackRR({UPS1 РЕЖ КРАС},!{UPS1 РЕЖ КРАС},60,131);

endif



