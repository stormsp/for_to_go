package main

import (
	"fmt"
	"math/rand"
	"regexp"
	"time"
)

// Rep представляет репер со значением bool
type Rep struct {
	Value bool
}

// findReps находит реперы в тексте и возвращает карту с реперами и их значениями
func findReps(text string) map[string]Rep {
	re := regexp.MustCompile(`\{([^{}\n]+)\}`)
	matches := re.FindAllStringSubmatch(text, -1)

	reps := make(map[string]Rep)

	for _, match := range matches {
		if len(match) > 1 {
			rep := match[1]
			// Убираем пробелы и символы табуляции в начале и конце строки
			rep = regexp.MustCompile(`^\s+|\s+$`).ReplaceAllString(rep, "")

			// Проверяем, был ли репер добавлен ранее
			if _, found := reps[rep]; !found {
				// Заполняем значение репера случайным образом
				value := rand.Intn(2) == 1
				reps[rep] = Rep{Value: value}
			}
		}
	}

	return reps
}

func main() {
	// Инициализируем генератор случайных чисел
	rand.Seed(time.Now().UnixNano())

	text := `
// ... ваш текст ...

// Аварийное Закрытие ГРС со стравливанием
if checkPrecondSt(0) {
  if {РЕЖИМ ГРС ДЕС} != 0 && ({ХОД АО СТ ДЕС} == 0) && ({ХОД АО СТ ДЕС} == 0) && ({РЗР АО СТ ДЕС} == 0) {
  dout[1]=1	// ход ао
  // пошел останов
    SET({табл АварияДЕС}[sys_num], 1)
	SET({звонок шк ДЕС}[sys_num], 1)
	x=setwex({ОХР КР ДЕС}[sys_num],1,{Т ож кран ДЕС})
    x=setwex({Вход ДЕС}[sys_num],1,{Т ож кран ДЕС})
    x=setwex({Выход ДЕС}[sys_num],1,{Т ож кран ДЕС})
    x=setwex({ВЫХ Д ДЕС}[sys_num],1,{Т ож кран ДЕС})
    x=setwex({КРдоРУ ДЕС}[sys_num],1,{Т ож кран ДЕС})
    SET({Клап котлы ДЕС}[sys_num], 1)
	
 //set({}[sys_num],1 - отключение котлов
    if ({Вход ДЕС} == 2) && ({Выход ДЕС} == 2) && ({ОХР КР ДЕС} == 2) && ({КРдоРУ ДЕС} == 2) // проверка закрылись ли краны
          x=setwex({СВзаВХ ДЕС}[sys_num],0,{Т ож кран ДЕС})       // открыть свечной кран на входе
          x=setwex({СВдоВЫХ ДЕС}[sys_num],0,{Т ож кран ДЕС})      // открыть свечной кран на выходе
          x=setwex({СВ ОК ДЕС}[sys_num],0,{Т ож кран ДЕС})        // открыть свечной кран ОХРАН крана
          SET({ТУ КОТЕЛ 1 ДЕС}[sys_num], 1)
	             // выключить котел 1
          SET({ТУ КОТЕЛ 2 ДЕС}[sys_num], 1)
	             // выключить котел 2
}
dout[1]=2+(({ОХР КР ДЕС} == 2) && ({Вход ДЕС} == 2) && ({КРдоРУ ДЕС} == 2) && ({Выход ДЕС} == 2) && ({ВЫХ Д ДЕС} == 2) && ({СВзаВХ ДЕС} == 1) && ({СВдоВЫХ ДЕС} == 1) && ({СВ ОК ДЕС} == 1))  // ход ао
    SET({КОМ РЕЖ3 ДЕС}[sys_num], 0)
   // перевод в информ режим
}
}
// Закрытие ГРС без страваливания
if checkPrecondBt(0) {
  if {РЕЖИМ ГРС ДЕС} != 0 && ({ХОД АО БС ДЕС} == 0) && ({ХОД АО СТ ДЕС} == 0) && ({РЗР АО БС ДЕС} == 0) {
  dout[2]=1	// ход ао
  // пошел останов
    SET({табл АварияДЕС}[sys_num], 1)
	SET({звонок шк ДЕС}[sys_num], 1)
	x=setwex({ОХР КР ДЕС}[sys_num],1,{Т ож кран ДЕС})
    x=setwex({Вход ДЕС}[sys_num],1,{Т ож кран ДЕС})
    x=setwex({Выход ДЕС}[sys_num],1,{Т ож кран ДЕС})
    x=setwex({ВЫХ Д ДЕС}[sys_num],1,{Т ож кран ДЕС})
    x=setwex({КРдоРУ ДЕС}[sys_num],1,{Т ож кран ДЕС})
    SET({Клап котлы ДЕС}[sys_num], 1)
	if ({Вход ДЕС} == 2) && ({Выход ДЕС} == 2) && ({ОХР КР ДЕС} == 2) && ({КРдоРУ ДЕС} == 2) // проверка закрылись ли вх и вых краны
}
    dout[2]=2+(({ОХР КР ДЕС} == 2) && ({Вход ДЕС} == 2) && ({КРдоРУ ДЕС} == 2) && ({Выход ДЕС} == 2) && ({ВЫХ Д ДЕС} == 2))  // ход ао
    SET({КОМ РЕЖ3 ДЕС}[sys_num], 0)
   // перевод в информ режим
}
}
//
`

	reps := findReps(text)

	fmt.Println("Найденные реперы со значениями:")
	for rep, data := range reps {
		fmt.Printf("%s: %v\n", rep, data.Value)
	}
}
