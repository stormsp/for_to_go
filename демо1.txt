; ГРС Красноусольск (Стерлитамакское ЛПУМГ)
; 09.2019 Галеев
; Аварийный останов

; v2  -  Добавлены диагностические параметры для контроля выполнения алгоритма
; dout[1] - команда АО
; dout[2] - ход выполнения 0-нет , 1-выполняется
; dout[3] - причина сработки
; aout[4] - код ошибки выполнения
; aout[5] - дата последнего выполнения
; aout[6] - дата окончания выполнения


;valtrack.evl
; для вставки #include "eval.lib\ValTrack.evl"

;
; valTrack возращает 0 если val равен 0
; или если с момента перехода val в состояние,
; отличное от 0 не прошло timeout секунд.
; В противном случае функция возвращает 1.
;
func valTrack(val,timeout,id)
 if(eq(val,0))
  aout[id]=0
  return(0)
 endif

 ; aout[id] время перехода в состояние, отличное от 0
 ; для вычисления тайм-аута (в тиках со старта зонда)
 if(eq(aout[id],0))
  aout[id]=getticks(0)
 endif

 if(ge(getticks(aout[id])*ticksize(),timeout))
  return(1)
 endif

 return(0)
endfunc

;
; valTrackGt и valTrackLt возращают 0 если отслеживаемый
; параметр не достоверен, или если не нарушена
; граница, или если со времени нарушения
; не прошло timeout секунд. В противном случае
; функции возвращают 1.
;
func valTrackGt(val,bound,timeout,id)
 return(valTrack(ne(dost(val),0)&gt(val,bound),timeout,id))
endfunc

func valTrackLt(val,bound,timeout,id)
 return(valTrack(ne(dost(val),0)&lt(val,bound),timeout,id))
endfunc

; при достоверности одного из трех каналов, недостоверный канал заменяется
; значением параметров с ЭКМ давление на вых низкое, высокое
;
func valTrackLt_dost(val,bound,timeout,id,p_ekm) 
  if (dost(val))
    return(valTrack(lt(val,bound),timeout,id))
  else
    return(p_ekm)
  endif
endfunc


func valTrackGt_dost(val,bound,timeout,id,p_ekm) 
  if (dost(val))
    return(valTrack(gt(val,bound),timeout,id))
  else
    return(p_ekm)
  endif
endfunc

;#include "eval.lib\set.evl"

; 01.06.15
; для вставки #include "eval.lib\set.evl"

;
; управление при условии достоверности
;
func setex(sys,value)
 if(eq(dost(#[sys]),0))
  return(0)
 endif
 set sys,value
 return(1)
endfunc

;
; setwex - аналог встроенной set_wait
; однако, в случае не успеха
; производится дополнительные 1 попытки
; достигнуть заданного соcтояния
;
func setwex(sys,value,timeout)
  if ne(set_wait(sys,value,timeout),0)
    sleep(18)
    return(set_wait(sys,value,timeout))
  endif
  return(0)
endfunc

;
; impuls
;
func impuls(sys,t)
  x=set_wait(sys,1,t)
  sleep(2*18)
  x=set_wait(sys,0,t)
  return(x)
endfunc



; установка значения с заданной чувствительностью
; возврат 1-установлено
;         0-без реакции
func setSens (sys,value,sens)
  x=0
  if (gt(abs(#[sys]-value),sens))
    x=setex(sys,value)
  endif
  return(x)
endfunc



func setwex_dost(sys,value,timeout)
  if(!dost(#[sys]))
    return(0)
  endif
  return(set_wait(sys,value,timeout))
endfunc









;#include "eval.lib\front.evl"
; front 0-> ne 0
; src - дискр сигнал
; id - номер переменной слежения
;
func front(src,id)
  x=0
  if (dost(src)&ne(src,dout[id])&ne(src,0))
    x=1
  endif
  dout[id]=src
  return(x)
endfunc




;----------- Условия выполнения аварийного останова -----------------------------
  ; по команде с экрана АРМ или от Диспетчера
  ; При нажатой более 4 секунд кнопке(механической)- только при аварийной ситуации:
        ; - Аварийно-высокое давление
        ; - Пожар в операторной
        ; - Пожар в блоке переключения (при наличии пож.сигнализации)
        ; - Пожар в блоке одоризации (при наличии пож.сигнализации)
;-------------------------------------------------------------------------------
func checkFire(dummy)
  x=0
  x=x|{ПОЖАР ОПЕ КРАС} ;<Пожар в операторной>.
  x=x|{ПОЖАР ПЕР КРАС} ;<Пожар в блоке переключения>.
  ;x=x|{ПОЖАР ОДО КРАС} ;<Пожар в блоке одоризации>.
  return(x)
endfunc


func checkPrecond(dummy)
  x=0
  if(ne({РЕЖИМ ГРС КРАС},0))
    x=x+{КОМ АО КРАС}  ;1 команда - без условий
    if (eq(valTrack({КН АВОСТ КРАС},4,8),1))    ; кнопка - только при аварийной ситуации
      x=x+2*checkFire(0)        ;2 Пожар
      x=x+3*{РВЫХ123АВ КРАС}    ;3 Аварийно-высокое давление
    endif
  endif
  return(x)
endfunc
;--------------------------------------------------------------------------------

func oninit(t)
 dout[1]=0
 dout[2]=0
 dout[3]=0
 aout[4]=0
 aout[5]=true({ДАТА АО КРАС})
 aout[6]=true({ДАТА ЗАО КРАС})

 ; ждем первого опроса модулей
 sleep(10*18)                        
endfunc

reason=checkPrecond(0)
if ne(reason,0)

   dout[2]=1	; ход ао
   dout[3]=reason
   aout[5]=time()

   ; закрыть охранный кран
   x=setwex({КРАН ОХР КРАС}[sys_num],1,40)

   sleep(18)
   if ne({КРАН ОХР КРАС},2)
     ; закрыть входной кран
     x=setwex({КРАН ВХОД КРАС}[sys_num],1,20)
   endif

   ; закрыть байпасный кран
   x=setwex({КРАН БАЙП КРАС}[sys_num],1,20)

   ; закрыть выходной
   x=setwex({КРАН ВЫХ КРАС}[sys_num],1,20)

   ; подогреватель отключить
   x=set_wait({ПГ УПР КРАС}[sys_num],2,20) 	

   ; отключить одоризатор 
   x=set_wait({РЕЖ ОДОР1 КРАС}[sys_num],0,20)

   ; Если пожар
   if (checkFire(0))

     ; если закрыты : Охранный, байпасный, выходной краны
     if(eq({КРАН ОХР КРАС},2)&eq({КРАН ВЫХ КРАС},2)&eq({КРАН БАЙП КРАС},2))
       ; открыть свечные краны
       x=setwex({КР СВ НИЗ КРАС}[sys_num],0,30)
       x=setwex({КР СВ ВЫС КРАС}[sys_num],0,30)
     endif

     ; если охранный кран не закрыт, а закрыты: входной, байпасный, выходной краны
     if(((ne({КРАН ОХР КРАС},2))&eq({КРАН ВХОД КРАС},2))&eq({КРАН ВЫХ КРАС},2))
       ; открыть свечной кран с низ стороны
       x=setwex({КР СВ НИЗ КРАС}[sys_num],0,30)
     endif
   endif
  
   ; переводим грс в режим по месту
   set {КОМ РЕЖ3}[sys_num],0

   sleep(5*18)
   dout[1]=0	; ком ао (возм причина)
   dout[2]=0

   aout[6]=time()

endif

if front(ne({РЕЖИМ ГРС КРАС},0),9)
  dout[3]=0
endif
